{"version":3,"sources":["../../../src/controllers/mintOptions.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport Config from '../config.js';\nimport {\n  getEuroMetaPda,\n  getExpirationDataPda,\n  getOptionMintPda,\n  getWriterMintPda,\n  getUnderlyingPoolPda,\n  getOptionCyclePda,\n  getAuctionProgramVaultPda,\n  getAuctionStatePda,\n  getPoolAuthorityVaultsPda,\n} from '../utils/pdas.js';\nimport {\n  sleep,\n  OptionTypeV2,\n  postTelegramMessage,\n  getAtaForUser,\n} from '../utils/index.js';\nimport * as anchor from '@coral-xyz/anchor';\nimport BN from 'bn.js';\nimport {\n  getProgram,\n  getVaultsProgram,\n  getAuctionProgram,\n} from '../utils/programUtils.js';\nimport { TOKEN_PROGRAM_ID } from '@coral-xyz/anchor/dist/cjs/utils/token.js';\nimport { Transaction } from '@solana/web3.js';\nimport { getAssociatedTokenAddressSync } from '@solana/spl-token';\nimport cron from 'node-cron';\n\nasync function processMintingTransaction(\n  provider: anchor.AnchorProvider,\n  expiration: BN,\n  cycleNumber: BN,\n): Promise<string> {\n  const program = await getProgram(provider);\n  const vaultsProgram = await getVaultsProgram(provider);\n  const auctionProgram = await getAuctionProgram(provider);\n  const priceDecimals = 2;\n  const [expirationData, expirationDataBump] = getExpirationDataPda(\n    Config.TESTNET_WETH_MINT,\n    expiration,\n    Config.TESTNET_ORACLE_PUBLIC_KEY,\n  );\n\n  const initExpirationDataInstruction = await program.methods\n    .initExpirationData(expiration, priceDecimals, 1)\n    .accounts({\n      payer: provider.publicKey,\n      underlyingMint: Config.TESTNET_WETH_MINT,\n      expirationData: expirationData,\n      oracle: Config.TESTNET_ORACLE_PUBLIC_KEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .signers([Config.ADMIN_KEYPAIR])\n    .instruction();\n  const underlyingPrice = 25_000;\n  const strikePrices = [\n    new BN(Math.pow(10, priceDecimals) * (underlyingPrice + 1)),\n  ];\n  const [underlyingPool] = getUnderlyingPoolPda(Config.TESTNET_WETH_MINT);\n  const [euroMetaKey, euroMetaBump] = getEuroMetaPda(\n    Config.TESTNET_WETH_MINT,\n    Config.TESTNET_QUOTE_MINT,\n    expiration,\n    OptionTypeV2.CALL,\n    underlyingPool,\n    strikePrices,\n  );\n  const underlyingAmountPerContract = new BN(1_000_000);\n  const [optionMint] = getOptionMintPda(euroMetaKey);\n  const [writerMint] = getWriterMintPda(euroMetaKey);\n  const euroMeta = {\n    underlyingMint: Config.TESTNET_WETH_MINT,\n    collateralPool: underlyingPool,\n    stableMint: Config.TESTNET_QUOTE_MINT,\n    stableDecimals: 6,\n    underlyingDecimals: 6,\n    underlyingAmountPerContract,\n    oracle: Config.TESTNET_ORACLE_PUBLIC_KEY,\n    strikePrices,\n    priceDecimals,\n    optionMint,\n    writerMint,\n    expiration,\n    expirationData,\n    bumpSeed: euroMetaBump,\n    oracleProviderId: 1,\n    optionType: OptionTypeV2.CALL,\n  };\n  const createEuroMetaV2Instruction = await program.methods\n    .createEuroMetaV2(\n      euroMeta.expiration,\n      euroMeta.strikePrices,\n      euroMeta.oracleProviderId,\n      euroMeta.optionType,\n      expirationDataBump,\n      euroMeta.underlyingAmountPerContract,\n      euroMeta.priceDecimals,\n    )\n    .accounts({\n      payer: provider.publicKey,\n      underlyingMint: euroMeta.underlyingMint,\n      collateralPool: euroMeta.collateralPool,\n      stableMint: euroMeta.stableMint,\n      euroMeta: euroMetaKey,\n      expirationData: euroMeta.expirationData,\n      optionMint: euroMeta.optionMint,\n      writerMint: euroMeta.writerMint,\n      oracle: euroMeta.oracle,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .signers([Config.ADMIN_KEYPAIR])\n    .instruction();\n  {\n    const tx = new Transaction().add(initExpirationDataInstruction);\n    tx.add(createEuroMetaV2Instruction);\n    const sig = await provider.sendAndConfirm(tx);\n    console.log(`Euro meta created: ${sig}`);\n    sleep(5000);\n  }\n  const wholeContracts = 2.5;\n  const size = new BN(Math.pow(10, 4)).muln(wholeContracts);\n  const atas = await getAtaForUser(\n    euroMeta.optionMint,\n    euroMeta.writerMint,\n    euroMeta.underlyingMint,\n    provider.publicKey,\n  );\n  if (!atas) {\n    throw new Error('Failed to get ATAs');\n  }\n  const strikePrice = new BN(269);\n  const optionType = OptionTypeV2.CALL;\n  const auctionType = 0;\n  const startingBid = new BN(1_000_000);\n  const duration = new BN(604_800);\n\n  const [optionCycle] = getOptionCyclePda(provider.publicKey, cycleNumber);\n  const [auctionState] = getAuctionStatePda(provider.publicKey, cycleNumber);\n  const [auctionProgramVault] = getAuctionProgramVaultPda(auctionState);\n  console.log('Getting auction program ATAs');\n  const auctionProgramAtas = await getAtaForUser(\n    euroMeta.optionMint,\n    euroMeta.writerMint,\n    euroMeta.underlyingMint,\n    auctionProgramVault,\n    true,\n  );\n  if (!auctionProgramAtas) {\n    throw new Error('Failed to get auction program ATAs');\n  }\n  const [poolAuthorityVaults] = getPoolAuthorityVaultsPda();\n  const vaultUnderlyingAta = getAssociatedTokenAddressSync(\n    euroMeta.underlyingMint,\n    poolAuthorityVaults,\n    true,\n  );\n  // const vaultStableAta = getAssociatedTokenAddressSync(\n  //   euroMeta.stableMint,\n  //   poolAuthorityVaults,\n  //   true,\n  // );\n  const mintOptionInstruction = await vaultsProgram.methods\n    .startCycle(\n      cycleNumber,\n      strikePrice,\n      underlyingAmountPerContract,\n      size,\n      priceDecimals,\n      optionType,\n      auctionType,\n      startingBid,\n      duration,\n    )\n    .accounts({\n      vaultAuthority: provider.publicKey,\n      optionCycle,\n      vaultOptionTokenAccount: auctionProgramAtas.optionMintAta,\n      vaultWriterTokenAccount: auctionProgramAtas.writerMintAta,\n      collateralPool: euroMeta.collateralPool,\n      underlyingPool: atas.underlyingMintAta,\n      vaultCollateral: vaultUnderlyingAta,\n      vaultPoolAuthority: poolAuthorityVaults,\n      euroMeta: euroMetaKey,\n      optionMint: euroMeta.optionMint,\n      writerMint: euroMeta.writerMint,\n      auctionState,\n      euroPrimitiveProgram: Config.LEVERAGE_FUN_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .instruction();\n\n  const initAuctionIx = await auctionProgram.methods\n    .initializeAuction(cycleNumber, auctionType, startingBid, duration)\n    .accounts({\n      auction: auctionState,\n      creator: provider.publicKey,\n      tokenMint: euroMeta.optionMint,\n      assetHolder: auctionProgramAtas.optionMintAta,\n      vault: auctionProgramVault,\n      creatorTokenAccount: atas.optionMintAta,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n    })\n    .instruction();\n  {\n    const tx = new Transaction().add(initAuctionIx).add(mintOptionInstruction);\n    return await provider.sendAndConfirm(tx);\n  }\n}\n\nexport async function scheduleMintingProcess(provider: anchor.AnchorProvider) {\n  let cycleNumber = new BN(6);\n  cron.schedule('0 0 * * 5', async () => {\n    console.log('Current cycle number, ', cycleNumber.toString());\n    try {\n      const expiration = new BN(new Date().getTime() / 1000 + 3600);\n      const txHash = await processMintingTransaction(\n        provider,\n        expiration,\n        cycleNumber,\n      );\n      if (txHash) {\n        await postTelegramMessage(txHash);\n        console.log(`Transaction completed successfully: ${txHash}`);\n        cycleNumber = cycleNumber.add(new BN(1));\n      }\n    } catch (error) {\n      console.error('Scheduled transaction failed:', error);\n    }\n  });\n}\n\nexport async function startMintingOptions(_req: Request, res: Response) {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  scheduleMintingProcess(provider).catch(error => {\n    console.error('Failed to start cron job:', error);\n  });\n\n  res.status(202).json({\n    message: 'Minting options cron job started',\n    status: 'pending',\n  });\n}\n"],"names":["Config","getEuroMetaPda","getExpirationDataPda","getOptionMintPda","getWriterMintPda","getUnderlyingPoolPda","getOptionCyclePda","getAuctionProgramVaultPda","getAuctionStatePda","getPoolAuthorityVaultsPda","sleep","OptionTypeV2","postTelegramMessage","getAtaForUser","anchor","BN","getProgram","getVaultsProgram","getAuctionProgram","TOKEN_PROGRAM_ID","Transaction","getAssociatedTokenAddressSync","cron","processMintingTransaction","provider","expiration","cycleNumber","program","vaultsProgram","auctionProgram","priceDecimals","expirationData","expirationDataBump","TESTNET_WETH_MINT","TESTNET_ORACLE_PUBLIC_KEY","initExpirationDataInstruction","methods","initExpirationData","accounts","payer","publicKey","underlyingMint","oracle","tokenProgram","rent","web3","SYSVAR_RENT_PUBKEY","systemProgram","SystemProgram","programId","signers","ADMIN_KEYPAIR","instruction","underlyingPrice","strikePrices","Math","pow","underlyingPool","euroMetaKey","euroMetaBump","TESTNET_QUOTE_MINT","CALL","underlyingAmountPerContract","optionMint","writerMint","euroMeta","collateralPool","stableMint","stableDecimals","underlyingDecimals","bumpSeed","oracleProviderId","optionType","createEuroMetaV2Instruction","createEuroMetaV2","tx","add","sig","sendAndConfirm","console","log","wholeContracts","size","muln","atas","Error","strikePrice","auctionType","startingBid","duration","optionCycle","auctionState","auctionProgramVault","auctionProgramAtas","poolAuthorityVaults","vaultUnderlyingAta","mintOptionInstruction","startCycle","vaultAuthority","vaultOptionTokenAccount","optionMintAta","vaultWriterTokenAccount","writerMintAta","underlyingMintAta","vaultCollateral","vaultPoolAuthority","euroPrimitiveProgram","LEVERAGE_FUN_PROGRAM_ID","initAuctionIx","initializeAuction","auction","creator","tokenMint","assetHolder","vault","creatorTokenAccount","scheduleMintingProcess","schedule","toString","Date","getTime","txHash","error","startMintingOptions","_req","res","AnchorProvider","env","setProvider","catch","status","json","message"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}
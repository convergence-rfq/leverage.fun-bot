{"version":3,"sources":["../../../src/controllers/mintOptions.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport Config from '../config.js';\nimport {\n  getEuroMetaPda,\n  getExpirationDataPda,\n  getOptionMintPda,\n  getWriterMintPda,\n  getUnderlyingPoolPda,\n  getOptionCyclePda,\n  getAuctionProgramVaultPda,\n  getAuctionStatePda,\n} from '../utils/pdas.js';\nimport {\n  sleep,\n  OptionTypeV2,\n  // postTelegramMessage,\n  getAtaForUser,\n} from '../utils/index.js';\nimport * as anchor from '@coral-xyz/anchor';\nimport BN from 'bn.js';\nimport { getProgram, getVaultsProgram } from '../utils/programUtils.js';\nimport { TOKEN_PROGRAM_ID } from '@coral-xyz/anchor/dist/cjs/utils/token.js';\nimport { Transaction } from '@solana/web3.js';\n// import cron from 'node-cron';\n\nasync function processMintingTransaction(\n  provider: anchor.AnchorProvider,\n  expiration: BN,\n): Promise<string> {\n  const program = await getProgram(provider);\n  const vaultsProgram = await getVaultsProgram(provider);\n  const priceDecimals = 2;\n  const [expirationData, expirationDataBump] = getExpirationDataPda(\n    Config.TESTNET_SOL_MINT,\n    expiration,\n    Config.SOLANA_DEVNET_ORACLE,\n  );\n\n  const initExpirationDataInstruction = await program.methods\n    .initExpirationData(expiration, priceDecimals, 1)\n    .accounts({\n      payer: provider.publicKey,\n      underlyingMint: Config.TESTNET_SOL_MINT,\n      expirationData: expirationData,\n      oracle: Config.SOLANA_DEVNET_ORACLE,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .signers([Config.ADMIN_KEYPAIR])\n    .instruction();\n  const underlyingPrice = 25_000;\n  const strikePrices = [\n    new BN(Math.pow(10, priceDecimals) * (underlyingPrice + 1)),\n  ];\n  const [underlyingPool] = getUnderlyingPoolPda(Config.TESTNET_SOL_MINT);\n  const [euroMetaKey, euroMetaBump] = getEuroMetaPda(\n    Config.TESTNET_SOL_MINT,\n    Config.TESTNET_QUOTE_MINT,\n    expiration,\n    OptionTypeV2.CALL,\n    underlyingPool,\n    strikePrices,\n  );\n  const underlyingAmountPerContract = new BN(1_000_000);\n  const [optionMint] = getOptionMintPda(euroMetaKey);\n  const [writerMint] = getWriterMintPda(euroMetaKey);\n  const euroMeta = {\n    underlyingMint: Config.TESTNET_SOL_MINT,\n    collateralPool: underlyingPool,\n    stableMint: Config.TESTNET_QUOTE_MINT,\n    stableDecimals: 6,\n    underlyingDecimals: 6,\n    underlyingAmountPerContract,\n    oracle: Config.SOLANA_DEVNET_ORACLE,\n    strikePrices,\n    priceDecimals,\n    optionMint,\n    writerMint,\n    expiration,\n    expirationData,\n    bumpSeed: euroMetaBump,\n    oracleProviderId: 1,\n    optionType: OptionTypeV2.CALL,\n  };\n  const createEuroMetaV2Instruction = await program.methods\n    .createEuroMetaV2(\n      euroMeta.expiration,\n      euroMeta.strikePrices,\n      euroMeta.oracleProviderId,\n      euroMeta.optionType,\n      expirationDataBump,\n      euroMeta.underlyingAmountPerContract,\n      euroMeta.priceDecimals,\n    )\n    .accounts({\n      payer: provider.publicKey,\n      underlyingMint: euroMeta.underlyingMint,\n      collateralPool: euroMeta.collateralPool,\n      stableMint: euroMeta.stableMint,\n      euroMeta: euroMetaKey,\n      expirationData: euroMeta.expirationData,\n      optionMint: euroMeta.optionMint,\n      writerMint: euroMeta.writerMint,\n      oracle: euroMeta.oracle,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .signers([Config.ADMIN_KEYPAIR])\n    .instruction();\n  {\n    const tx = new Transaction().add(initExpirationDataInstruction);\n    tx.add(createEuroMetaV2Instruction);\n    const sig = await provider.sendAndConfirm(tx);\n    console.log(`Euro meta created: ${sig}`);\n    sleep(5000);\n  }\n  const wholeContracts = 2.5;\n  const size = new BN(Math.pow(10, 4)).muln(wholeContracts);\n  const atas = await getAtaForUser(\n    euroMeta.optionMint,\n    euroMeta.writerMint,\n    euroMeta.underlyingMint,\n    provider.publicKey,\n  );\n  if (!atas) {\n    throw new Error('Failed to get ATAs');\n  }\n  // const mintOptionInstruction = await program.methods\n  //   .mintOptionsV2(size, OptionTypeV2.CALL)\n  //   .accounts({\n  //     payer: provider.publicKey,\n  //     euroMeta: euroMetaKey,\n  //     collateralPool: underlyingPool,\n  //     optionMint: euroMeta.optionMint,\n  //     writerMint: euroMeta.writerMint,\n  //     minterCollateral: atas.underlyingMintAta,\n  //     optionDestination: atas.optionMintAta,\n  //     writerDestination: atas.writerMintAta,\n  //     tokenProgram: TOKEN_PROGRAM_ID,\n  //   })\n  //   .signers([Config.ADMIN_KEYPAIR])\n  //   .instruction();\n  const cycleNumber = new BN(1);\n  const strikePrice = new BN(269);\n  const optionType = OptionTypeV2.CALL;\n  const auctionType = 0;\n  const startingBid = new BN(1_000_000);\n  const duration = new BN(604_800);\n\n  const [optionCycle] = getOptionCyclePda(provider.publicKey, cycleNumber);\n  const [auctionProgramVault] = getAuctionProgramVaultPda(optionCycle);\n  const [auctionState] = getAuctionStatePda(provider.publicKey);\n  const auctionProgramAtas = await getAtaForUser(\n    euroMeta.optionMint,\n    euroMeta.writerMint,\n    euroMeta.underlyingMint,\n    auctionProgramVault,\n    true,\n  );\n  if (!auctionProgramAtas) {\n    throw new Error('Failed to get auction program ATAs');\n  }\n  const mintOptionInstruction = await vaultsProgram.methods\n    .startCycle(\n      cycleNumber,\n      strikePrice,\n      underlyingAmountPerContract,\n      size,\n      priceDecimals,\n      optionType,\n      auctionType,\n      startingBid,\n      duration,\n    )\n    .accounts({\n      vaultAuthority: provider.publicKey,\n      optionCycle,\n      vaultOptionTokenAccount: auctionProgramAtas.optionMintAta,\n      vaultWriterTokenAccount: auctionProgramAtas.writerMintAta,\n      auctionVault: auctionProgramVault,\n      creatorTokenAccount: atas.optionMintAta,\n      underlyingMint: euroMeta.underlyingMint,\n      stableMint: euroMeta.stableMint,\n      underlyingPool: euroMeta.collateralPool,\n      stablePool: euroMeta.collateralPool,\n      euroMeta: euroMetaKey,\n      optionMint: euroMeta.optionMint,\n      writerMint: euroMeta.writerMint,\n      expirationData: euroMeta.expirationData,\n      oracle: euroMeta.oracle,\n      auctionState,\n      euroPrimitiveProgram: Config.LEVERAGE_FUN_PROGRAM_ID,\n      optionAuctionProgram: Config.AUCTION_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    })\n    .instruction();\n  {\n    const tx = new Transaction().add(mintOptionInstruction);\n    return await provider.sendAndConfirm(tx);\n  }\n}\n\nexport async function scheduleMintingProcess(provider: anchor.AnchorProvider) {\n  // cron.schedule('30 * * * *', async () => {\n  try {\n    const expiration = new BN(new Date().getTime() / 1000 + 3600);\n    const txHash = await processMintingTransaction(provider, expiration);\n    if (txHash) {\n      // await postTelegramMessage(txHash);\n      console.log(`Transaction completed successfully: ${txHash}`);\n    }\n  } catch (error) {\n    console.error('Scheduled transaction failed:', error);\n  }\n  // });\n}\n\nexport async function startMintingOptions(_req: Request, res: Response) {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  scheduleMintingProcess(provider).catch(error => {\n    console.error('Failed to start cron job:', error);\n  });\n\n  res.status(202).json({\n    message: 'Minting options cron job started',\n    status: 'pending',\n  });\n}\n"],"names":["Config","getEuroMetaPda","getExpirationDataPda","getOptionMintPda","getWriterMintPda","getUnderlyingPoolPda","getOptionCyclePda","getAuctionProgramVaultPda","getAuctionStatePda","sleep","OptionTypeV2","getAtaForUser","anchor","BN","getProgram","getVaultsProgram","TOKEN_PROGRAM_ID","Transaction","processMintingTransaction","provider","expiration","program","vaultsProgram","priceDecimals","expirationData","expirationDataBump","TESTNET_SOL_MINT","SOLANA_DEVNET_ORACLE","initExpirationDataInstruction","methods","initExpirationData","accounts","payer","publicKey","underlyingMint","oracle","tokenProgram","rent","web3","SYSVAR_RENT_PUBKEY","systemProgram","SystemProgram","programId","signers","ADMIN_KEYPAIR","instruction","underlyingPrice","strikePrices","Math","pow","underlyingPool","euroMetaKey","euroMetaBump","TESTNET_QUOTE_MINT","CALL","underlyingAmountPerContract","optionMint","writerMint","euroMeta","collateralPool","stableMint","stableDecimals","underlyingDecimals","bumpSeed","oracleProviderId","optionType","createEuroMetaV2Instruction","createEuroMetaV2","tx","add","sig","sendAndConfirm","console","log","wholeContracts","size","muln","atas","Error","cycleNumber","strikePrice","auctionType","startingBid","duration","optionCycle","auctionProgramVault","auctionState","auctionProgramAtas","mintOptionInstruction","startCycle","vaultAuthority","vaultOptionTokenAccount","optionMintAta","vaultWriterTokenAccount","writerMintAta","auctionVault","creatorTokenAccount","stablePool","euroPrimitiveProgram","LEVERAGE_FUN_PROGRAM_ID","optionAuctionProgram","AUCTION_PROGRAM_ID","scheduleMintingProcess","Date","getTime","txHash","error","startMintingOptions","_req","res","AnchorProvider","env","setProvider","catch","status","json","message"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AACA,OAAOA,YAAY,eAAe;AAClC,SACEC,cAAc,EACdC,oBAAoB,EACpBC,gBAAgB,EAChBC,gBAAgB,EAChBC,oBAAoB,EACpBC,iBAAiB,EACjBC,yBAAyB,EACzBC,kBAAkB,QACb,mBAAmB;AAC1B,SACEC,KAAK,EACLC,YAAY,EAEZC,AADA,uBAAuB;AACvBA,aAAa,QACR,oBAAoB;AAC3B,YAAYC,YAAY,oBAAoB;AAC5C,OAAOC,QAAQ,QAAQ;AACvB,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,2BAA2B;AACxE,SAASC,gBAAgB,QAAQ,4CAA4C;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,gCAAgC;AAEhC,eAAeC,0BACbC,QAA+B,EAC/BC,UAAc;IAEd,MAAMC,UAAU,MAAMP,WAAWK;IACjC,MAAMG,gBAAgB,MAAMP,iBAAiBI;IAC7C,MAAMI,gBAAgB;IACtB,MAAM,CAACC,gBAAgBC,mBAAmB,GAAGvB,qBAC3CF,OAAO0B,gBAAgB,EACvBN,YACApB,OAAO2B,oBAAoB;IAG7B,MAAMC,gCAAgC,MAAMP,QAAQQ,OAAO,CACxDC,kBAAkB,CAACV,YAAYG,eAAe,GAC9CQ,QAAQ,CAAC;QACRC,OAAOb,SAASc,SAAS;QACzBC,gBAAgBlC,OAAO0B,gBAAgB;QACvCF,gBAAgBA;QAChBW,QAAQnC,OAAO2B,oBAAoB;QACnCS,cAAcpB;QACdqB,MAAMzB,OAAO0B,IAAI,CAACC,kBAAkB;QACpCC,eAAe5B,OAAO0B,IAAI,CAACG,aAAa,CAACC,SAAS;IACpD,GACCC,OAAO,CAAC;QAAC3C,OAAO4C,aAAa;KAAC,EAC9BC,WAAW;IACd,MAAMC,kBAAkB;IACxB,MAAMC,eAAe;QACnB,IAAIlC,GAAGmC,KAAKC,GAAG,CAAC,IAAI1B,iBAAkBuB,CAAAA,kBAAkB,CAAA;KACzD;IACD,MAAM,CAACI,eAAe,GAAG7C,qBAAqBL,OAAO0B,gBAAgB;IACrE,MAAM,CAACyB,aAAaC,aAAa,GAAGnD,eAClCD,OAAO0B,gBAAgB,EACvB1B,OAAOqD,kBAAkB,EACzBjC,YACAV,aAAa4C,IAAI,EACjBJ,gBACAH;IAEF,MAAMQ,8BAA8B,IAAI1C,GAAG;IAC3C,MAAM,CAAC2C,WAAW,GAAGrD,iBAAiBgD;IACtC,MAAM,CAACM,WAAW,GAAGrD,iBAAiB+C;IACtC,MAAMO,WAAW;QACfxB,gBAAgBlC,OAAO0B,gBAAgB;QACvCiC,gBAAgBT;QAChBU,YAAY5D,OAAOqD,kBAAkB;QACrCQ,gBAAgB;QAChBC,oBAAoB;QACpBP;QACApB,QAAQnC,OAAO2B,oBAAoB;QACnCoB;QACAxB;QACAiC;QACAC;QACArC;QACAI;QACAuC,UAAUX;QACVY,kBAAkB;QAClBC,YAAYvD,aAAa4C,IAAI;IAC/B;IACA,MAAMY,8BAA8B,MAAM7C,QAAQQ,OAAO,CACtDsC,gBAAgB,CACfT,SAAStC,UAAU,EACnBsC,SAASX,YAAY,EACrBW,SAASM,gBAAgB,EACzBN,SAASO,UAAU,EACnBxC,oBACAiC,SAASH,2BAA2B,EACpCG,SAASnC,aAAa,EAEvBQ,QAAQ,CAAC;QACRC,OAAOb,SAASc,SAAS;QACzBC,gBAAgBwB,SAASxB,cAAc;QACvCyB,gBAAgBD,SAASC,cAAc;QACvCC,YAAYF,SAASE,UAAU;QAC/BF,UAAUP;QACV3B,gBAAgBkC,SAASlC,cAAc;QACvCgC,YAAYE,SAASF,UAAU;QAC/BC,YAAYC,SAASD,UAAU;QAC/BtB,QAAQuB,SAASvB,MAAM;QACvBC,cAAcpB;QACdqB,MAAMzB,OAAO0B,IAAI,CAACC,kBAAkB;QACpCC,eAAe5B,OAAO0B,IAAI,CAACG,aAAa,CAACC,SAAS;IACpD,GACCC,OAAO,CAAC;QAAC3C,OAAO4C,aAAa;KAAC,EAC9BC,WAAW;IACd;QACE,MAAMuB,KAAK,IAAInD,cAAcoD,GAAG,CAACzC;QACjCwC,GAAGC,GAAG,CAACH;QACP,MAAMI,MAAM,MAAMnD,SAASoD,cAAc,CAACH;QAC1CI,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAEH,IAAI,CAAC;QACvC7D,MAAM;IACR;IACA,MAAMiE,iBAAiB;IACvB,MAAMC,OAAO,IAAI9D,GAAGmC,KAAKC,GAAG,CAAC,IAAI,IAAI2B,IAAI,CAACF;IAC1C,MAAMG,OAAO,MAAMlE,cACjB+C,SAASF,UAAU,EACnBE,SAASD,UAAU,EACnBC,SAASxB,cAAc,EACvBf,SAASc,SAAS;IAEpB,IAAI,CAAC4C,MAAM;QACT,MAAM,IAAIC,MAAM;IAClB;IACA,sDAAsD;IACtD,4CAA4C;IAC5C,gBAAgB;IAChB,iCAAiC;IACjC,6BAA6B;IAC7B,sCAAsC;IACtC,uCAAuC;IACvC,uCAAuC;IACvC,gDAAgD;IAChD,6CAA6C;IAC7C,6CAA6C;IAC7C,sCAAsC;IACtC,OAAO;IACP,qCAAqC;IACrC,oBAAoB;IACpB,MAAMC,cAAc,IAAIlE,GAAG;IAC3B,MAAMmE,cAAc,IAAInE,GAAG;IAC3B,MAAMoD,aAAavD,aAAa4C,IAAI;IACpC,MAAM2B,cAAc;IACpB,MAAMC,cAAc,IAAIrE,GAAG;IAC3B,MAAMsE,WAAW,IAAItE,GAAG;IAExB,MAAM,CAACuE,YAAY,GAAG9E,kBAAkBa,SAASc,SAAS,EAAE8C;IAC5D,MAAM,CAACM,oBAAoB,GAAG9E,0BAA0B6E;IACxD,MAAM,CAACE,aAAa,GAAG9E,mBAAmBW,SAASc,SAAS;IAC5D,MAAMsD,qBAAqB,MAAM5E,cAC/B+C,SAASF,UAAU,EACnBE,SAASD,UAAU,EACnBC,SAASxB,cAAc,EACvBmD,qBACA;IAEF,IAAI,CAACE,oBAAoB;QACvB,MAAM,IAAIT,MAAM;IAClB;IACA,MAAMU,wBAAwB,MAAMlE,cAAcO,OAAO,CACtD4D,UAAU,CACTV,aACAC,aACAzB,6BACAoB,MACApD,eACA0C,YACAgB,aACAC,aACAC,UAEDpD,QAAQ,CAAC;QACR2D,gBAAgBvE,SAASc,SAAS;QAClCmD;QACAO,yBAAyBJ,mBAAmBK,aAAa;QACzDC,yBAAyBN,mBAAmBO,aAAa;QACzDC,cAAcV;QACdW,qBAAqBnB,KAAKe,aAAa;QACvC1D,gBAAgBwB,SAASxB,cAAc;QACvC0B,YAAYF,SAASE,UAAU;QAC/BV,gBAAgBQ,SAASC,cAAc;QACvCsC,YAAYvC,SAASC,cAAc;QACnCD,UAAUP;QACVK,YAAYE,SAASF,UAAU;QAC/BC,YAAYC,SAASD,UAAU;QAC/BjC,gBAAgBkC,SAASlC,cAAc;QACvCW,QAAQuB,SAASvB,MAAM;QACvBmD;QACAY,sBAAsBlG,OAAOmG,uBAAuB;QACpDC,sBAAsBpG,OAAOqG,kBAAkB;QAC/CjE,cAAcpB;QACdqB,MAAMzB,OAAO0B,IAAI,CAACC,kBAAkB;QACpCC,eAAe5B,OAAO0B,IAAI,CAACG,aAAa,CAACC,SAAS;IACpD,GACCG,WAAW;IACd;QACE,MAAMuB,KAAK,IAAInD,cAAcoD,GAAG,CAACmB;QACjC,OAAO,MAAMrE,SAASoD,cAAc,CAACH;IACvC;AACF;AAEA,OAAO,eAAekC,uBAAuBnF,QAA+B;IAC1E,4CAA4C;IAC5C,IAAI;QACF,MAAMC,aAAa,IAAIP,GAAG,IAAI0F,OAAOC,OAAO,KAAK,OAAO;QACxD,MAAMC,SAAS,MAAMvF,0BAA0BC,UAAUC;QACzD,IAAIqF,QAAQ;YACV,qCAAqC;YACrCjC,QAAQC,GAAG,CAAC,CAAC,oCAAoC,EAAEgC,OAAO,CAAC;QAC7D;IACF,EAAE,OAAOC,OAAO;QACdlC,QAAQkC,KAAK,CAAC,iCAAiCA;IACjD;AACA,MAAM;AACR;AAEA,OAAO,eAAeC,oBAAoBC,IAAa,EAAEC,GAAa;IACpE,MAAM1F,WAAWP,OAAOkG,cAAc,CAACC,GAAG;IAC1CnG,OAAOoG,WAAW,CAAC7F;IAEnBmF,uBAAuBnF,UAAU8F,KAAK,CAACP,CAAAA;QACrClC,QAAQkC,KAAK,CAAC,6BAA6BA;IAC7C;IAEAG,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;QACnBC,SAAS;QACTF,QAAQ;IACV;AACF"}
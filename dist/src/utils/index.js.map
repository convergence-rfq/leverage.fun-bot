{"version":3,"sources":["../../../src/utils/index.ts"],"sourcesContent":["import * as pdas from './pdas.js';\nimport * as programUtils from './programUtils.js';\n// import * as anchor from '@coral-xyz/anchor';\nimport axios from 'axios';\nimport Config from '../config.js';\nimport BN from 'bn.js';\nimport {\n  createAssociatedTokenAccountInstruction,\n  getAssociatedTokenAddressSync,\n} from '@solana/spl-token';\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  sendAndConfirmTransaction,\n} from '@solana/web3.js';\n\nexport { pdas, programUtils };\n\nconst connection = new Connection(Config.TESTNET_RPC_URL, 'confirmed');\n\nexport enum OptionTypeV2 {\n  CALL = 0,\n  PUT = 1,\n  LONG_CALL_SPREAD = 2,\n  LONG_PUT_SPREAD = 3,\n}\n\nexport const sleep = (ms: number) =>\n  new Promise(resolve => setTimeout(resolve, ms));\n\nexport async function postTelegramMessage(txHash: string) {\n  const url = `https://api.telegram.org/bot${Config.TELEGRAM_BOT_TOKEN}/sendMessage`;\n  const message = `Minted call option via Leverage.fun expiring in 1 hour. Explorer: [tx link](https://eclipsescan.xyz/tx/${txHash}?cluster=testnet)`;\n\n  const payload = {\n    chat_id: Config.TELEGRAM_CHANNEL_ID,\n    text: message,\n    parse_mode: 'Markdown',\n  };\n\n  await axios.post(url, payload);\n}\nexport const serializeStrikePrices = (strikePrices: BN[]) => {\n  let buffer = Buffer.from([]);\n  strikePrices.forEach(async value => {\n    const newBuffer = value.toArrayLike(Buffer, 'le', 8);\n    // @ts-expect-error idk why this shows an error\n    buffer = Buffer.concat([buffer, newBuffer]);\n  });\n  return buffer;\n};\n\nexport async function getAtaForUser(\n  optionMint: PublicKey,\n  writerMint: PublicKey,\n  underlyingMint: PublicKey,\n  accountOwner: PublicKey,\n  allowOwnerOffCurve: boolean = false,\n) {\n  try {\n    console.log('Getting ATAs');\n\n    const optionMintAta = getAssociatedTokenAddressSync(\n      optionMint,\n      accountOwner,\n      allowOwnerOffCurve,\n    );\n    const writerMintAta = getAssociatedTokenAddressSync(\n      writerMint,\n      accountOwner,\n      allowOwnerOffCurve,\n    );\n    const underlyingMintAta = getAssociatedTokenAddressSync(\n      underlyingMint,\n      accountOwner,\n      allowOwnerOffCurve,\n    );\n\n    console.log('optionMintAta:', optionMintAta.toBase58());\n    console.log('writerMintAta:', writerMintAta.toBase58());\n    console.log('underlyingMintAta:', underlyingMintAta.toBase58());\n\n    // Check if accounts exist first\n    const accounts = await connection.getMultipleAccountsInfo([\n      optionMintAta,\n      writerMintAta,\n      underlyingMintAta,\n    ]);\n\n    const tx = new Transaction();\n\n    // Only create ATAs that don't exist\n    if (!accounts[0]) {\n      tx.add(\n        createAssociatedTokenAccountInstruction(\n          Config.ADMIN_KEYPAIR.publicKey,\n          optionMintAta,\n          accountOwner,\n          optionMint,\n        ),\n      );\n    }\n\n    if (!accounts[1]) {\n      tx.add(\n        createAssociatedTokenAccountInstruction(\n          Config.ADMIN_KEYPAIR.publicKey,\n          writerMintAta,\n          accountOwner,\n          writerMint,\n        ),\n      );\n    }\n\n    if (!accounts[2]) {\n      tx.add(\n        createAssociatedTokenAccountInstruction(\n          Config.ADMIN_KEYPAIR.publicKey,\n          underlyingMintAta,\n          accountOwner,\n          underlyingMint,\n        ),\n      );\n    }\n\n    // Only send transaction if there are instructions to execute\n    if (tx.instructions.length > 0) {\n      const sig = await sendAndConfirmTransaction(connection, tx, [\n        Config.ADMIN_KEYPAIR,\n      ]);\n      console.log('ATAs created:', sig);\n    } else {\n      console.log('All ATAs already exist');\n    }\n\n    return { optionMintAta, writerMintAta, underlyingMintAta };\n  } catch (e) {\n    console.error('Error in getAtaForUser:', e);\n    return null;\n  }\n}\n"],"names":["pdas","programUtils","axios","Config","createAssociatedTokenAccountInstruction","getAssociatedTokenAddressSync","Connection","Transaction","sendAndConfirmTransaction","connection","TESTNET_RPC_URL","OptionTypeV2","sleep","ms","Promise","resolve","setTimeout","postTelegramMessage","txHash","url","TELEGRAM_BOT_TOKEN","message","payload","chat_id","TELEGRAM_CHANNEL_ID","text","parse_mode","post","serializeStrikePrices","strikePrices","buffer","Buffer","from","forEach","value","newBuffer","toArrayLike","concat","getAtaForUser","optionMint","writerMint","underlyingMint","accountOwner","allowOwnerOffCurve","console","log","optionMintAta","writerMintAta","underlyingMintAta","toBase58","accounts","getMultipleAccountsInfo","tx","add","ADMIN_KEYPAIR","publicKey","instructions","length","sig","e","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}